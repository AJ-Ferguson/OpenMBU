
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwBREAK	261
#define	rwELSE	262
#define	rwCONTINUE	263
#define	rwGLOBAL	264
#define	rwIF	265
#define	rwNIL	266
#define	rwRETURN	267
#define	rwWHILE	268
#define	rwDO	269
#define	rwENDIF	270
#define	rwENDWHILE	271
#define	rwENDFOR	272
#define	rwDEFAULT	273
#define	rwFOR	274
#define	rwDATABLOCK	275
#define	rwSWITCH	276
#define	rwCASE	277
#define	rwSWITCHSTR	278
#define	rwCASEOR	279
#define	rwPACKAGE	280
#define	rwNAMESPACE	281
#define	rwCLASS	282
#define	ILLEGAL_TOKEN	283
#define	CHRCONST	284
#define	INTCONST	285
#define	TTAG	286
#define	VAR	287
#define	IDENT	288
#define	STRATOM	289
#define	TAGATOM	290
#define	FLTCONST	291
#define	opMINUSMINUS	292
#define	opPLUSPLUS	293
#define	STMT_SEP	294
#define	opSHL	295
#define	opSHR	296
#define	opPLASN	297
#define	opMIASN	298
#define	opMLASN	299
#define	opDVASN	300
#define	opMODASN	301
#define	opANDASN	302
#define	opXORASN	303
#define	opORASN	304
#define	opSLASN	305
#define	opSRASN	306
#define	opCAT	307
#define	opEQ	308
#define	opNE	309
#define	opGE	310
#define	opLE	311
#define	opAND	312
#define	opOR	313
#define	opSTREQ	314
#define	opCOLONCOLON	315
#define	opMDASN	316
#define	opNDASN	317
#define	opNTASN	318
#define	opSTRNE	319
#define	UNARY	320
#define	opINTNAME	321
#define	opINTNAMER	322

#line 1 "cmdgram.y"


// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x
 
int CMDlex();
void CMDerror(char *, ...); 

#define alloca dMalloc

#line 31 "cmdgram.y"

        /* Reserved Word Definitions */
#line 41 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 53 "cmdgram.y"

        /* Operator Definitions */

#line 65 "cmdgram.y"
typedef union {
   char              c;
   int               i;
   const char *      s;
   char *            str;
   double            f;
   StmtNode *        stmt;
   ExprNode *        expr;
   SlotAssignNode *  slist;
   VarNode *         var;
   SlotDecl          slot;
   InternalSlotDecl  intslot;
   ObjectBlockDecl   odcl;
   ObjectDeclNode *  od;
   AssignDecl        asn;
   IfStmtNode *      ifnode;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		334
#define	YYFLAG		-32768
#define	YYNTBASE	93

#define YYTRANSLATE(x) ((unsigned)(x) <= 322 ? yytranslate[x] : 130)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    57,     2,     2,     2,    47,    46,     2,    48,
    49,    39,    37,    50,    38,    44,    40,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    51,    52,    41,
    43,    42,    87,    58,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    83,     2,    92,    55,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    53,    45,    54,    56,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    84,    85,    86,    88,    89,
    90,    91
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    41,    44,    47,
    51,    54,    59,    66,    75,    86,    87,    89,    91,    95,
   106,   117,   125,   138,   148,   149,   152,   153,   155,   156,
   159,   160,   162,   164,   167,   170,   174,   178,   180,   188,
   196,   201,   209,   215,   217,   221,   227,   235,   241,   248,
   258,   267,   276,   284,   293,   301,   309,   316,   318,   320,
   324,   328,   332,   336,   340,   344,   348,   352,   356,   359,
   362,   364,   370,   374,   378,   382,   386,   390,   394,   398,
   402,   406,   410,   414,   418,   422,   425,   428,   430,   432,
   434,   436,   438,   440,   442,   444,   446,   451,   455,   462,
   466,   470,   472,   476,   478,   480,   483,   486,   489,   492,
   495,   498,   501,   504,   507,   510,   512,   514,   518,   525,
   528,   534,   537,   541,   547,   552,   559,   566,   567,   569,
   571,   575,   577,   580,   585,   590,   598,   600
};

static const short yyrhs[] = {    94,
     0,     0,    94,    95,     0,    99,     0,   100,     0,    96,
     0,    25,    33,    53,    97,    54,    52,     0,   100,     0,
    97,   100,     0,     0,    98,    99,     0,   114,     0,   115,
     0,   116,     0,   103,     0,   111,     0,     6,    52,     0,
     8,    52,     0,    12,    52,     0,    12,   118,    52,     0,
   117,    52,     0,    31,    43,   118,    52,     0,    31,    43,
   118,    50,   118,    52,     0,     3,    33,    48,   101,    49,
    53,    98,    54,     0,     3,    33,    82,    33,    48,   101,
    49,    53,    98,    54,     0,     0,   102,     0,    32,     0,
   102,    50,    32,     0,    20,    33,    48,    33,   105,    49,
    53,   127,    54,    52,     0,     5,   121,    48,   106,   105,
   107,    49,    53,   108,    54,     0,     5,   121,    48,   106,
   105,   107,    49,     0,     5,   121,    48,    83,   106,    92,
   105,   107,    49,    53,   108,    54,     0,     5,   121,    48,
    83,   106,    92,   105,   107,    49,     0,     0,    51,    33,
     0,     0,   118,     0,     0,    50,   126,     0,     0,   127,
     0,   109,     0,   127,   109,     0,   104,    52,     0,   109,
   104,    52,     0,    53,    98,    54,     0,    99,     0,    21,
    48,   118,    49,    53,   112,    54,     0,    23,    48,   118,
    49,    53,   112,    54,     0,    22,   113,    51,    98,     0,
    22,   113,    51,    98,    18,    51,    98,     0,    22,   113,
    51,    98,   112,     0,   118,     0,   113,    24,   118,     0,
    10,    48,   118,    49,   110,     0,    10,    48,   118,    49,
   110,     7,   110,     0,    13,    48,   118,    49,   110,     0,
    14,   110,    13,    48,   118,    49,     0,    19,    48,   118,
    52,   118,    52,   118,    49,   110,     0,    19,    48,   118,
    52,   118,    52,    49,   110,     0,    19,    48,   118,    52,
    52,   118,    49,   110,     0,    19,    48,   118,    52,    52,
    49,   110,     0,    19,    48,    52,   118,    52,   118,    49,
   110,     0,    19,    48,    52,   118,    52,    49,   110,     0,
    19,    48,    52,    52,   118,    49,   110,     0,    19,    48,
    52,    52,    49,   110,     0,   123,     0,   123,     0,    48,
   118,    49,     0,   118,    55,   118,     0,   118,    47,   118,
     0,   118,    46,   118,     0,   118,    45,   118,     0,   118,
    37,   118,     0,   118,    38,   118,     0,   118,    39,   118,
     0,   118,    40,   118,     0,    38,   118,     0,    39,   118,
     0,    31,     0,   118,    87,   118,    51,   118,     0,   118,
    41,   118,     0,   118,    42,   118,     0,   118,    77,   118,
     0,   118,    78,   118,     0,   118,    75,   118,     0,   118,
    76,   118,     0,   118,    80,   118,     0,   118,    62,   118,
     0,   118,    63,   118,     0,   118,    79,   118,     0,   118,
    81,   118,     0,   118,    88,   118,     0,   118,    58,   118,
     0,    57,   118,     0,    56,   118,     0,    35,     0,    36,
     0,    30,     0,     6,     0,   119,     0,   120,     0,    33,
     0,    34,     0,    32,     0,    32,    83,   129,    92,     0,
   118,    44,    33,     0,   118,    44,    33,    83,   129,    92,
     0,   118,    90,   121,     0,   118,    91,   121,     0,    33,
     0,    48,   118,    49,     0,    60,     0,    59,     0,    64,
   118,     0,    65,   118,     0,    66,   118,     0,    67,   118,
     0,    68,   118,     0,    69,   118,     0,    70,   118,     0,
    71,   118,     0,    72,   118,     0,    73,   118,     0,   124,
     0,   104,     0,    32,    43,   118,     0,    32,    83,   129,
    92,    43,   118,     0,    32,   122,     0,    32,    83,   129,
    92,   122,     0,   119,   122,     0,   119,    43,   118,     0,
   119,    43,    53,   126,    54,     0,    33,    48,   125,    49,
     0,    33,    82,    33,    48,   125,    49,     0,   118,    44,
    33,    48,   125,    49,     0,     0,   126,     0,   118,     0,
   126,    50,   118,     0,   128,     0,   127,   128,     0,    33,
    43,   118,    52,     0,    20,    43,   118,    52,     0,    33,
    83,   129,    92,    43,   118,    52,     0,   118,     0,   129,
    50,   118,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   141,   146,   148,   153,   155,   157,   162,   167,   169,   174,
   176,   181,   182,   183,   184,   185,   186,   188,   190,   192,
   194,   196,   198,   203,   205,   210,   212,   217,   219,   224,
   229,   231,   233,   235,   240,   242,   247,   249,   254,   256,
   261,   263,   265,   267,   272,   274,   279,   281,   286,   288,
   293,   295,   297,   302,   304,   309,   311,   316,   318,   323,
   325,   327,   329,   331,   333,   335,   337,   342,   347,   349,
   351,   353,   355,   357,   359,   361,   363,   365,   367,   369,
   371,   373,   375,   377,   379,   381,   383,   385,   387,   389,
   391,   393,   395,   397,   399,   401,   403,   405,   407,   409,
   411,   413,   415,   417,   419,   421,   423,   428,   430,   435,
   437,   442,   444,   449,   451,   453,   455,   457,   459,   461,
   463,   465,   467,   469,   471,   476,   478,   480,   482,   484,
   486,   488,   490,   492,   497,   499,   501,   506,   508,   513,
   515,   520,   522,   527,   529,   531,   536,   538
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwBREAK","rwELSE","rwCONTINUE","rwGLOBAL","rwIF","rwNIL",
"rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE","rwENDFOR","rwDEFAULT","rwFOR",
"rwDATABLOCK","rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE","rwNAMESPACE",
"rwCLASS","ILLEGAL_TOKEN","CHRCONST","INTCONST","TTAG","VAR","IDENT","STRATOM",
"TAGATOM","FLTCONST","'+'","'-'","'*'","'/'","'<'","'>'","'='","'.'","'|'","'&'",
"'%'","'('","')'","','","':'","';'","'{'","'}'","'^'","'~'","'!'","'@'","opMINUSMINUS",
"opPLUSPLUS","STMT_SEP","opSHL","opSHR","opPLASN","opMIASN","opMLASN","opDVASN",
"opMODASN","opANDASN","opXORASN","opORASN","opSLASN","opSRASN","opCAT","opEQ",
"opNE","opGE","opLE","opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN",
"opNDASN","opNTASN","'?'","opSTRNE","UNARY","opINTNAME","opINTNAMER","']'","start",
"decl_list","decl","package_decl","fn_decl_list","statement_list","stmt","fn_decl_stmt",
"var_list_decl","var_list","datablock_decl","object_decl","parent_block","object_name",
"object_args","object_declare_block","object_decl_list","stmt_block","switch_stmt",
"case_block","case_expr","if_stmt","while_stmt","for_stmt","expression_stmt",
"expr","slot_acc","intslot_acc","class_name_expr","assign_op_struct","stmt_expr",
"funcall_expr","expr_list_decl","expr_list","slot_assign_list","slot_assign",
"aidx_expr",""
};
#endif

static const short yyr1[] = {     0,
    93,    94,    94,    95,    95,    95,    96,    97,    97,    98,
    98,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,   100,   100,   101,   101,   102,   102,   103,
   104,   104,   104,   104,   105,   105,   106,   106,   107,   107,
   108,   108,   108,   108,   109,   109,   110,   110,   111,   111,
   112,   112,   112,   113,   113,   114,   114,   115,   115,   116,
   116,   116,   116,   116,   116,   116,   116,   117,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   118,   118,   118,   118,   118,   118,   119,   119,   120,
   120,   121,   121,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   124,   124,   124,   125,   125,   126,
   126,   127,   127,   128,   128,   128,   129,   129
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     2,     2,     2,     3,
     2,     4,     6,     8,    10,     0,     1,     1,     3,    10,
    10,     7,    12,     9,     0,     2,     0,     1,     0,     2,
     0,     1,     1,     2,     2,     3,     3,     1,     7,     7,
     4,     7,     5,     1,     3,     5,     7,     5,     6,     9,
     8,     8,     7,     8,     7,     7,     6,     1,     1,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
     1,     5,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     4,     3,     6,     3,
     3,     1,     3,     1,     1,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     3,     6,     2,
     5,     2,     3,     5,     4,     6,     6,     0,     1,     1,
     3,     1,     2,     4,     4,     7,     1,     3
};

static const short yydefact[] = {     2,
     1,     0,     0,   101,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   100,    81,   106,   104,   105,    98,
    99,     0,     0,     0,     0,     0,     3,     6,     4,     5,
    15,   127,    16,    12,    13,    14,     0,     0,   102,   103,
    69,   126,     0,   112,     0,     0,    17,    18,     0,   101,
    81,    19,     0,    69,     0,    10,    48,     0,     0,     0,
     0,     0,     0,     0,     0,   115,   114,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   130,   138,
     0,    79,    80,     0,    97,    96,    21,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   132,    26,     0,     0,    37,     0,    20,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   128,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   147,     0,   140,     0,   139,     0,    70,    75,    76,
    77,    78,    83,    84,   108,    74,    73,    72,    71,    95,
    90,    91,    87,    88,    85,    86,    92,    89,    93,     0,
    94,   110,   111,     0,   133,    28,     0,    27,     0,   113,
    37,    35,    38,     0,     0,    47,    11,     0,     0,     0,
     0,    35,     0,     0,     0,     8,     0,    22,     0,   107,
   135,     0,   138,   138,     0,     0,     0,     0,     0,    26,
     0,     0,    39,    56,    58,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     9,     0,   148,     0,   131,
   141,     0,     0,     0,    82,   134,    10,    29,     0,    35,
    36,     0,     0,     0,    59,    67,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     7,    23,   129,   136,
   137,   109,     0,     0,    39,    40,    32,    57,    66,    65,
     0,    63,     0,     0,     0,     0,     0,    54,    49,    50,
    24,    10,     0,    41,    64,    62,    61,     0,     0,     0,
     0,   142,     0,    10,     0,    34,     0,     0,    43,    42,
    60,     0,     0,     0,     0,   143,    55,    51,    25,    41,
    45,    31,     0,    44,     0,     0,     0,    30,     0,    53,
     0,    46,   145,   144,     0,    10,    33,     0,    52,     0,
   146,     0,     0,     0
};

static const short yydefgoto[] = {   332,
     1,    27,    28,   195,   122,    57,    30,   177,   178,    31,
    32,   213,   182,   243,   298,   299,    58,    33,   255,   277,
    34,    35,    36,    37,    38,    39,    40,    46,    79,    54,
    42,   145,   146,   300,   292,   143
};

static const short yypact[] = {-32768,
  1487,     5,    39,   -11,    18,    49,  1875,    50,  1983,    51,
    56,    53,    55,    72,-32768,     1,  2418,   -35,-32768,-32768,
-32768,  2424,  2424,  2424,  2424,  2424,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    62,  1492,   245,-32768,
    64,-32768,    30,-32768,  2424,    69,-32768,-32768,  2424,-32768,
-32768,-32768,   148,-32768,  2424,-32768,-32768,   106,  2188,    75,
  2424,  2424,    67,  2424,  2424,-32768,-32768,  2424,  2424,  2424,
  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,-32768,  2424,
    91,    -7,    -7,   363,    -7,    -7,-32768,  2424,  2424,  2424,
  2424,  2424,  2424,    92,  2424,  2424,  2424,  2424,  2424,  2424,
  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,  2424,
    39,    39,  2199,-32768,   100,   104,   461,    23,   518,-32768,
   573,  2036,    90,  2236,   628,   107,   683,   738,   139,    89,
  1492,  1492,  1492,  1492,  1492,  1492,  1492,  1492,  1492,  1492,
  1492,  1492,   -19,  1492,    94,    95,    98,-32768,    -5,    -5,
    -7,    -7,   193,   193,   -33,  1712,  1812,    -7,  1767,   -14,
    71,    71,  1857,  1857,   193,   193,  1657,  1602,   -14,   793,
   -14,-32768,-32768,  2424,  1492,-32768,    99,   103,   101,-32768,
  2424,   105,  1492,  1983,  1983,-32768,-32768,  2424,  2271,   848,
  2306,   105,    97,   102,    11,-32768,  2424,-32768,  2424,  2449,
-32768,  2424,  2424,  2424,  2424,  2424,    41,   118,   122,   100,
    65,   125,   109,   153,-32768,   903,  1983,   958,  2317,  2354,
  1013,   123,   151,   151,   126,-32768,  1068,  1492,  2424,-32768,
  1492,   132,   142,   -10,  1547,-32768,-32768,-32768,   147,   105,
-32768,  2424,   150,  1983,-32768,-32768,  1983,  1983,  1123,  1983,
  1178,  2389,   121,  2424,   155,   159,-32768,-32768,  1492,-32768,
-32768,-32768,  2075,   149,   109,    95,   152,-32768,-32768,-32768,
  1983,-32768,  1983,  1983,  1233,    80,    -8,  1492,-32768,-32768,
-32768,-32768,   158,    12,-32768,-32768,-32768,  1983,   161,   -32,
    48,-32768,  2424,-32768,  2114,   162,   165,   160,   170,    12,
-32768,  2424,  2424,  2424,   166,-32768,  1492,  1944,-32768,    12,
-32768,-32768,   167,   170,  1288,  1343,    -4,-32768,   169,-32768,
   168,-32768,-32768,-32768,   178,-32768,-32768,  2424,  2153,  1398,
-32768,   201,   234,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -230,     0,  -120,    31,-32768,-32768,
  -102,  -180,    61,   -21,   -65,   -52,  -181,-32768,  -214,-32768,
-32768,-32768,-32768,-32768,   275,-32768,-32768,   -92,   -37,    -1,
-32768,  -182,  -168,   -26,  -273,  -200
};


#define	YYLAST		2522


static const short yytable[] = {    41,
    29,   114,   214,   215,   234,   207,   263,    41,   196,   256,
   303,   222,    80,     2,   204,   293,     3,   306,   172,   173,
   232,   233,    88,    89,    90,    91,   306,     3,    50,    94,
   199,   289,    97,    90,    91,   246,    94,    43,    94,   199,
    47,    97,   294,    64,   290,   199,    81,   100,   101,   205,
   304,   295,    15,    51,    17,    18,    19,    20,    21,   265,
    22,    23,   268,   308,   225,   269,   270,   289,   272,    48,
    24,    44,   200,   266,   226,   111,   112,   115,    25,    26,
   290,   262,   111,   112,   111,   112,    45,   325,    60,   285,
   202,   286,   287,   320,   236,   329,    49,    55,    59,   289,
    61,   305,    62,   317,    63,   181,   301,    88,    89,    90,
    91,   116,   290,    87,    94,   -68,   118,    97,   123,   129,
    41,   187,   126,   147,   155,    88,    89,    90,    91,    92,
    93,   176,    94,    95,    96,    97,   179,   188,   197,   192,
   198,     2,   201,    98,   202,   203,    99,   208,   210,   223,
   100,   101,   209,   238,   224,   212,   240,   241,   242,   244,
   111,   112,   230,   102,   103,   104,   105,   106,   107,   108,
   237,   253,   254,   276,     3,   109,   110,   257,   111,   112,
   260,   297,    41,    41,    88,    89,    90,    91,    92,    93,
   261,    94,    95,    96,    97,   264,   313,   297,   267,   120,
   333,   282,    98,   302,   284,    99,   296,   297,   279,   100,
   101,   313,   280,   312,   310,    41,   311,   318,   322,   326,
   328,   327,   102,   103,   104,   105,   106,   107,   108,    88,
    89,    90,    91,   334,   109,   110,    94,   111,   112,    97,
   239,   211,    41,   283,   321,    41,    41,   314,    41,   291,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,    41,   187,     0,     0,     0,     0,     0,     0,    41,
     0,    41,    41,   108,     0,     0,     0,     0,     0,     0,
   110,    53,   111,   112,     0,     0,    41,   113,     0,     0,
     0,     0,     0,    41,   187,     0,    82,    83,    84,    85,
    86,     0,     0,    66,    67,     0,    41,   187,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,     0,   117,
     0,     0,     0,   119,     0,     0,     0,    41,   187,   121,
     0,     0,     0,   125,     0,   127,   128,     0,   130,   131,
     0,     0,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,     0,   144,     0,     0,     0,     0,     0,
     0,     0,   149,   150,   151,   152,   153,   154,     0,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,     0,     0,   175,     0,     0,
     0,     0,   183,     0,     0,     0,     0,     0,   190,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,   148,     0,     0,     0,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,   144,   109,
   110,     0,   111,   112,     0,   183,     0,     0,     0,     0,
     0,     0,   216,   218,     0,   221,     0,     0,     0,     0,
     0,   227,     0,   228,     0,     0,   231,   144,   144,   142,
   235,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   249,   251,     0,     0,    88,    89,    90,
    91,    92,    93,   259,    94,    95,    96,    97,     0,   180,
     0,     0,     0,     0,     0,    98,   144,     0,    99,     0,
     0,     0,   100,   101,     0,     0,   275,     0,   278,     0,
     0,     0,     0,     0,     0,   102,   103,   104,   105,   106,
   107,   108,     0,     0,     0,     0,     0,   109,   110,     0,
   111,   112,     0,     0,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,   184,   307,     0,     0,
     0,     0,    98,     0,     0,    99,   315,   316,   142,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,   330,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,   185,     0,     0,     0,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,     0,     0,     0,   191,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,   193,     0,     0,     0,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,   194,     0,     0,     0,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,     0,     0,   206,     0,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,     0,     0,     0,   219,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,   245,     0,     0,     0,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,   247,     0,     0,     0,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,     0,     0,     0,   252,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,     0,     0,     0,   258,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,   271,     0,     0,     0,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,   273,     0,     0,     0,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,   288,     0,     0,     0,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,     0,     0,     0,   323,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,    88,
    89,    90,    91,    92,    93,     0,    94,    95,    96,    97,
     0,     0,     0,     0,   324,     0,     0,    98,     0,     0,
    99,     0,     0,     0,   100,   101,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   102,   103,   104,
   105,   106,   107,   108,     0,     0,     0,     0,     0,   109,
   110,     0,   111,   112,    88,    89,    90,    91,    92,    93,
     0,    94,    95,    96,    97,     0,     0,     0,     0,   331,
     0,     0,    98,     0,     0,    99,     0,     0,     0,   100,
   101,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   102,   103,   104,   105,   106,   107,   108,     0,
     0,     0,     0,     0,   109,   110,     0,   111,   112,     2,
     0,     3,     4,     0,     5,     0,     6,     0,     7,     8,
     9,     0,     0,     0,     0,    10,    11,    12,     0,    13,
     0,    14,     0,     0,     0,     0,    15,    16,    17,    18,
    19,    20,    21,     0,    22,    23,     0,     0,    88,    89,
    90,    91,    92,    93,    24,    94,    95,    96,    97,     0,
     0,     0,    25,    26,     0,     0,    98,     0,     0,    99,
     0,     0,     0,   100,   101,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   102,   103,   104,   105,
   106,   107,   108,     0,     0,     0,     0,     0,   109,   110,
     0,   111,   112,    88,    89,    90,    91,    92,    93,     0,
    94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
     0,    98,     0,     0,    99,     0,     0,     0,   100,   101,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   102,   103,   104,   105,   106,   107,   108,     0,     0,
     0,     0,     0,     0,   110,     0,   111,   112,    88,    89,
    90,    91,    92,    93,     0,    94,    95,    96,    97,     0,
     0,     0,     0,     0,     0,     0,    98,     0,     0,    99,
     0,     0,     0,   100,   101,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   102,   103,   104,   105,
   106,     0,   108,     0,     0,     0,     0,     0,     0,   110,
     0,   111,   112,    88,    89,    90,    91,    92,    93,     0,
    94,    95,    96,    97,     0,     0,     0,     0,     0,     0,
     0,    98,     0,     0,    99,     0,     0,     0,   100,   101,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   102,   103,   104,   105,     0,     0,   108,     0,     0,
     0,     0,     0,     0,   110,     0,   111,   112,    88,    89,
    90,    91,    92,    93,     0,    94,     0,    96,    97,     0,
     0,     0,     0,     0,     0,     0,    98,     0,     0,    99,
     0,     0,     0,   100,   101,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   102,   103,   104,   105,
     0,     0,   108,     0,     0,     0,     0,     0,     0,   110,
     0,   111,   112,    88,    89,    90,    91,    92,    93,     0,
    94,     0,    96,    97,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    99,     0,     0,     0,   100,   101,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   102,   103,   104,   105,     0,     0,   108,    88,    89,
    90,    91,    92,    93,   110,    94,   111,   112,    97,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    99,
     0,     0,     0,   100,   101,     0,     0,     0,     0,     3,
    50,     0,     0,     0,     0,     0,   102,   103,   104,   105,
     0,     0,   108,    88,    89,    90,    91,    92,    93,   110,
    94,   111,   112,    97,    15,    51,    17,    18,    19,    20,
    21,     0,    22,    23,    99,     0,     0,     0,   100,   101,
     0,     0,    24,     0,     0,     0,    52,     0,     0,     0,
    25,    26,     0,   104,   105,     0,     0,   108,     0,     0,
     0,     0,     0,     0,   110,     0,   111,   112,     3,     4,
     0,     5,     0,     6,     0,     7,     8,     9,     0,     0,
     0,   319,    10,    11,    12,   254,    13,     0,     0,     0,
     0,     0,     0,    15,    16,    17,    18,    19,    20,    21,
     0,    22,    23,     0,     0,     0,     0,     3,     4,     0,
     5,    24,     6,     0,     7,     8,     9,     0,     0,    25,
    26,    10,    11,    12,     0,    13,     0,     0,     0,     0,
     0,     0,    15,    16,    17,    18,    19,    20,    21,     0,
    22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
    24,     0,     0,     0,     0,    56,     0,     0,    25,    26,
     3,     4,     0,     5,     0,     6,     0,     7,     8,     9,
     0,     0,     0,     0,    10,    11,    12,     0,    13,     0,
     0,     0,     0,     0,     0,    15,    16,    17,    18,    19,
    20,    21,     0,    22,    23,     0,     0,     0,     0,     3,
     4,     0,     5,    24,     6,     0,     7,     8,     9,   186,
     0,    25,    26,    10,    11,    12,     0,    13,     0,     0,
     0,     0,     0,     0,    15,    16,    17,    18,    19,    20,
    21,     0,    22,    23,     0,     0,     0,     0,     3,     4,
     0,     5,    24,     6,     0,     7,     8,     9,   281,     0,
    25,    26,    10,    11,    12,     0,    13,     0,     0,     0,
     0,     0,     0,    15,    16,    17,    18,    19,    20,    21,
     0,    22,    23,     0,     0,     0,     0,     3,     4,     0,
     5,    24,     6,     0,     7,     8,     9,   309,     0,    25,
    26,    10,    11,    12,     0,    13,     0,     0,     0,     0,
     0,     0,    15,    16,    17,    18,    19,    20,    21,     0,
    22,    23,     3,    50,     0,     0,     0,     0,     0,     0,
    24,     0,     0,     3,    50,     0,     0,     0,    25,    26,
     0,     0,     0,     0,     0,     0,     0,    15,    51,    17,
    18,    19,    20,    21,     0,    22,    23,     0,    15,    51,
    17,    18,    19,    20,    21,    24,    22,    23,     0,   124,
     3,    50,     0,    25,    26,     0,    24,     0,     0,     0,
     0,   174,     0,     0,    25,    26,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    15,    51,    17,    18,    19,
    20,    21,     0,    22,    23,     3,    50,     0,     0,     0,
     0,     0,     0,    24,     0,     0,     0,   189,     0,     0,
     0,    25,    26,     0,     0,     0,     0,     0,     0,     0,
    15,    51,    17,    18,    19,    20,    21,     0,    22,    23,
     3,    50,     0,     0,     0,     0,     0,     0,    24,   217,
     0,     3,    50,     0,     0,     0,    25,    26,     0,     0,
     0,     0,     0,     0,     0,    15,    51,    17,    18,    19,
    20,    21,     0,    22,    23,     0,    15,    51,    17,    18,
    19,    20,    21,    24,    22,    23,     0,   220,     3,    50,
     0,    25,    26,     0,    24,   248,     0,     0,     0,     0,
     0,     0,    25,    26,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    15,    51,    17,    18,    19,    20,    21,
     0,    22,    23,     3,    50,     0,     0,     0,     0,     0,
     0,    24,   250,     0,     0,     0,     0,     0,     0,    25,
    26,     0,     0,     0,     0,     0,     0,     0,    15,    51,
    17,    18,    19,    20,    21,     0,    22,    23,     3,    50,
     0,     0,     0,     0,     0,     0,    24,   274,     0,     0,
     0,     0,     0,     0,    25,    26,     0,     0,     0,     0,
     0,     0,     0,    15,    51,    17,    18,    19,    20,    21,
    65,    22,    23,     0,     0,     0,     0,     0,     0,     0,
     0,    24,     0,     0,     0,     0,    66,    67,     0,    25,
    26,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   229,     0,     0,     0,     0,     0,     0,     0,     0,
    78,     0,     0,     0,     0,     0,     0,    66,    67,     0,
     0,     0,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77
};

static const short yycheck[] = {     1,
     1,    39,   184,   185,   205,   174,   237,     9,   129,   224,
    43,   192,    48,     3,    48,    24,     5,   291,   111,   112,
   203,   204,    37,    38,    39,    40,   300,     5,     6,    44,
    50,    20,    47,    39,    40,   217,    44,    33,    44,    50,
    52,    47,    51,    43,    33,    50,    82,    62,    63,    83,
    83,   282,    30,    31,    32,    33,    34,    35,    36,   240,
    38,    39,   244,   294,    54,   247,   248,    20,   250,    52,
    48,    33,    92,   242,   195,    90,    91,    48,    56,    57,
    33,    92,    90,    91,    90,    91,    48,    92,    33,   271,
    50,   273,   274,   308,    54,   326,    48,    48,    48,    20,
    48,    54,    48,   304,    33,    83,   288,    37,    38,    39,
    40,    82,    33,    52,    44,    52,    48,    47,    13,    53,
   122,   122,    48,    33,    33,    37,    38,    39,    40,    41,
    42,    32,    44,    45,    46,    47,    33,    48,    50,    33,
    52,     3,    49,    55,    50,    48,    58,    49,    48,    53,
    62,    63,    50,    32,    53,    51,    92,    33,    50,     7,
    90,    91,   200,    75,    76,    77,    78,    79,    80,    81,
    53,    49,    22,    53,     5,    87,    88,    52,    90,    91,
    49,   284,   184,   185,    37,    38,    39,    40,    41,    42,
    49,    44,    45,    46,    47,    49,   299,   300,    49,    52,
     0,    53,    55,    43,    53,    58,    49,   310,    54,    62,
    63,   314,    54,    54,    53,   217,    52,    52,    52,    51,
    43,    54,    75,    76,    77,    78,    79,    80,    81,    37,
    38,    39,    40,     0,    87,    88,    44,    90,    91,    47,
   210,   181,   244,   265,   310,   247,   248,   300,   250,   276,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,   263,   263,    -1,    -1,    -1,    -1,    -1,    -1,   271,
    -1,   273,   274,    81,    -1,    -1,    -1,    -1,    -1,    -1,
    88,     7,    90,    91,    -1,    -1,   288,    43,    -1,    -1,
    -1,    -1,    -1,   295,   295,    -1,    22,    23,    24,    25,
    26,    -1,    -1,    59,    60,    -1,   308,   308,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    -1,    45,
    -1,    -1,    -1,    49,    -1,    -1,    -1,   329,   329,    55,
    -1,    -1,    -1,    59,    -1,    61,    62,    -1,    64,    65,
    -1,    -1,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    -1,    80,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,    -1,    -1,   113,    -1,    -1,
    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,   124,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,   174,    87,
    88,    -1,    90,    91,    -1,   181,    -1,    -1,    -1,    -1,
    -1,    -1,   188,   189,    -1,   191,    -1,    -1,    -1,    -1,
    -1,   197,    -1,   199,    -1,    -1,   202,   203,   204,   205,
   206,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   219,   220,    -1,    -1,    37,    38,    39,
    40,    41,    42,   229,    44,    45,    46,    47,    -1,    49,
    -1,    -1,    -1,    -1,    -1,    55,   242,    -1,    58,    -1,
    -1,    -1,    62,    63,    -1,    -1,   252,    -1,   254,    -1,
    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,    79,
    80,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,    -1,
    90,    91,    -1,    -1,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    49,   293,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    58,   302,   303,   304,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,   328,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    -1,    -1,    51,    -1,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,    37,
    38,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    55,    -1,    -1,
    58,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
    78,    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    88,    -1,    90,    91,    37,    38,    39,    40,    41,    42,
    -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
    -1,    -1,    -1,    -1,    87,    88,    -1,    90,    91,     3,
    -1,     5,     6,    -1,     8,    -1,    10,    -1,    12,    13,
    14,    -1,    -1,    -1,    -1,    19,    20,    21,    -1,    23,
    -1,    25,    -1,    -1,    -1,    -1,    30,    31,    32,    33,
    34,    35,    36,    -1,    38,    39,    -1,    -1,    37,    38,
    39,    40,    41,    42,    48,    44,    45,    46,    47,    -1,
    -1,    -1,    56,    57,    -1,    -1,    55,    -1,    -1,    58,
    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
    79,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,    88,
    -1,    90,    91,    37,    38,    39,    40,    41,    42,    -1,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    76,    77,    78,    79,    80,    81,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    -1,    90,    91,    37,    38,
    39,    40,    41,    42,    -1,    44,    45,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,
    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
    79,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    88,
    -1,    90,    91,    37,    38,    39,    40,    41,    42,    -1,
    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    55,    -1,    -1,    58,    -1,    -1,    -1,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    -1,    90,    91,    37,    38,
    39,    40,    41,    42,    -1,    44,    -1,    46,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    58,
    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    88,
    -1,    90,    91,    37,    38,    39,    40,    41,    42,    -1,
    44,    -1,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    76,    77,    78,    -1,    -1,    81,    37,    38,
    39,    40,    41,    42,    88,    44,    90,    91,    47,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    -1,     5,
     6,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
    -1,    -1,    81,    37,    38,    39,    40,    41,    42,    88,
    44,    90,    91,    47,    30,    31,    32,    33,    34,    35,
    36,    -1,    38,    39,    58,    -1,    -1,    -1,    62,    63,
    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,
    56,    57,    -1,    77,    78,    -1,    -1,    81,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    -1,    90,    91,     5,     6,
    -1,     8,    -1,    10,    -1,    12,    13,    14,    -1,    -1,
    -1,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
    -1,    -1,    -1,    30,    31,    32,    33,    34,    35,    36,
    -1,    38,    39,    -1,    -1,    -1,    -1,     5,     6,    -1,
     8,    48,    10,    -1,    12,    13,    14,    -1,    -1,    56,
    57,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
    -1,    -1,    30,    31,    32,    33,    34,    35,    36,    -1,
    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    48,    -1,    -1,    -1,    -1,    53,    -1,    -1,    56,    57,
     5,     6,    -1,     8,    -1,    10,    -1,    12,    13,    14,
    -1,    -1,    -1,    -1,    19,    20,    21,    -1,    23,    -1,
    -1,    -1,    -1,    -1,    -1,    30,    31,    32,    33,    34,
    35,    36,    -1,    38,    39,    -1,    -1,    -1,    -1,     5,
     6,    -1,     8,    48,    10,    -1,    12,    13,    14,    54,
    -1,    56,    57,    19,    20,    21,    -1,    23,    -1,    -1,
    -1,    -1,    -1,    -1,    30,    31,    32,    33,    34,    35,
    36,    -1,    38,    39,    -1,    -1,    -1,    -1,     5,     6,
    -1,     8,    48,    10,    -1,    12,    13,    14,    54,    -1,
    56,    57,    19,    20,    21,    -1,    23,    -1,    -1,    -1,
    -1,    -1,    -1,    30,    31,    32,    33,    34,    35,    36,
    -1,    38,    39,    -1,    -1,    -1,    -1,     5,     6,    -1,
     8,    48,    10,    -1,    12,    13,    14,    54,    -1,    56,
    57,    19,    20,    21,    -1,    23,    -1,    -1,    -1,    -1,
    -1,    -1,    30,    31,    32,    33,    34,    35,    36,    -1,
    38,    39,     5,     6,    -1,    -1,    -1,    -1,    -1,    -1,
    48,    -1,    -1,     5,     6,    -1,    -1,    -1,    56,    57,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,    31,    32,
    33,    34,    35,    36,    -1,    38,    39,    -1,    30,    31,
    32,    33,    34,    35,    36,    48,    38,    39,    -1,    52,
     5,     6,    -1,    56,    57,    -1,    48,    -1,    -1,    -1,
    -1,    53,    -1,    -1,    56,    57,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    30,    31,    32,    33,    34,
    35,    36,    -1,    38,    39,     5,     6,    -1,    -1,    -1,
    -1,    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,
    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    30,    31,    32,    33,    34,    35,    36,    -1,    38,    39,
     5,     6,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,
    -1,     5,     6,    -1,    -1,    -1,    56,    57,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    30,    31,    32,    33,    34,
    35,    36,    -1,    38,    39,    -1,    30,    31,    32,    33,
    34,    35,    36,    48,    38,    39,    -1,    52,     5,     6,
    -1,    56,    57,    -1,    48,    49,    -1,    -1,    -1,    -1,
    -1,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    30,    31,    32,    33,    34,    35,    36,
    -1,    38,    39,     5,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,    56,
    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,    31,
    32,    33,    34,    35,    36,    -1,    38,    39,     5,     6,
    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,    -1,
    -1,    -1,    -1,    -1,    56,    57,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    30,    31,    32,    33,    34,    35,    36,
    43,    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    48,    -1,    -1,    -1,    -1,    59,    60,    -1,    56,
    57,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    83,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    -1,
    -1,    -1,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 142 "cmdgram.y"
{ ;
    break;}
case 2:
#line 147 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 149 "cmdgram.y"
{ if(!statementList) { statementList = yyvsp[0].stmt; } else { statementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 154 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 156 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 158 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 163 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s); ;
    break;}
case 8:
#line 168 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 170 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 175 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 177 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 17:
#line 187 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc(); ;
    break;}
case 18:
#line 189 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc(); ;
    break;}
case 19:
#line 191 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc(NULL); ;
    break;}
case 20:
#line 193 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc(yyvsp[-1].expr); ;
    break;}
case 21:
#line 195 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 22:
#line 197 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc(yyvsp[-3].s, yyvsp[-1].expr, NULL); ;
    break;}
case 23:
#line 199 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc(yyvsp[-5].s, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 24:
#line 204 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc(yyvsp[-6].s, NULL, yyvsp[-4].var, yyvsp[-1].stmt); ;
    break;}
case 25:
#line 206 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc(yyvsp[-6].s, yyvsp[-8].s, yyvsp[-4].var, yyvsp[-1].stmt); ;
    break;}
case 26:
#line 211 "cmdgram.y"
{ yyval.var = NULL; ;
    break;}
case 27:
#line 213 "cmdgram.y"
{ yyval.var = yyvsp[0].var; ;
    break;}
case 28:
#line 218 "cmdgram.y"
{ yyval.var = VarNode::alloc(yyvsp[0].s, NULL); ;
    break;}
case 29:
#line 220 "cmdgram.y"
{ yyval.var = yyvsp[-2].var; ((StmtNode*)(yyvsp[-2].var))->append((StmtNode*)VarNode::alloc(yyvsp[0].s, NULL)); ;
    break;}
case 30:
#line 225 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc(ConstantNode::alloc(yyvsp[-8].s), ConstantNode::alloc(yyvsp[-6].s), NULL, yyvsp[-5].s, yyvsp[-2].slist, NULL, true, false); ;
    break;}
case 31:
#line 230 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false); ;
    break;}
case 32:
#line 232 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s, NULL, NULL, false, false); ;
    break;}
case 33:
#line 234 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true); ;
    break;}
case 34:
#line 236 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc(yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s, NULL, NULL, false, true); ;
    break;}
case 35:
#line 241 "cmdgram.y"
{ yyval.s = NULL; ;
    break;}
case 36:
#line 243 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 37:
#line 248 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc("", false); ;
    break;}
case 38:
#line 250 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 39:
#line 255 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 40:
#line 257 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 41:
#line 262 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 42:
#line 264 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 43:
#line 266 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 44:
#line 268 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 45:
#line 273 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 46:
#line 275 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 47:
#line 280 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 48:
#line 282 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 49:
#line 287 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 50:
#line 289 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 51:
#line 294 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-3].i, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 52:
#line 296 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-6].i, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 53:
#line 298 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc(yyvsp[-4].i, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 54:
#line 303 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 55:
#line 305 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 56:
#line 310 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 57:
#line 312 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 58:
#line 317 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 59:
#line 319 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 60:
#line 324 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 61:
#line 326 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 62:
#line 328 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 63:
#line 330 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 64:
#line 332 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 65:
#line 334 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 66:
#line 336 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 338 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 343 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 69:
#line 348 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 70:
#line 350 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 71:
#line 352 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 72:
#line 354 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 73:
#line 356 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 74:
#line 358 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 75:
#line 360 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 76:
#line 362 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 77:
#line 364 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 78:
#line 366 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 79:
#line 368 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 80:
#line 370 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc(yyvsp[0].expr); ;
    break;}
case 81:
#line 372 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc(yyvsp[0].s); ;
    break;}
case 82:
#line 374 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc(yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 83:
#line 376 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 378 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 85:
#line 380 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 86:
#line 382 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 87:
#line 384 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 88:
#line 386 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 89:
#line 388 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 90:
#line 390 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 91:
#line 392 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 92:
#line 394 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc(yyvsp[-1].i, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 93:
#line 396 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 94:
#line 398 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 95:
#line 400 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i); ;
    break;}
case 96:
#line 402 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 97:
#line 404 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i, yyvsp[0].expr); ;
    break;}
case 98:
#line 406 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc(yyvsp[0].str, true); ;
    break;}
case 99:
#line 408 "cmdgram.y"
{ yyval.expr = FloatNode::alloc(yyvsp[0].f); ;
    break;}
case 100:
#line 410 "cmdgram.y"
{ yyval.expr = IntNode::alloc(yyvsp[0].i); ;
    break;}
case 101:
#line 412 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(StringTable->insert("break")); ;
    break;}
case 102:
#line 414 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc(yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName); ;
    break;}
case 103:
#line 416 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc(yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 104:
#line 418 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(yyvsp[0].s); ;
    break;}
case 105:
#line 420 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc(yyvsp[0].str, false); ;
    break;}
case 106:
#line 422 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc(yyvsp[0].s, NULL); ;
    break;}
case 107:
#line 424 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc(yyvsp[-3].s, yyvsp[-1].expr); ;
    break;}
case 108:
#line 429 "cmdgram.y"
{ yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s; yyval.slot.array = NULL; ;
    break;}
case 109:
#line 431 "cmdgram.y"
{ yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 110:
#line 436 "cmdgram.y"
{ yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 111:
#line 438 "cmdgram.y"
{ yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 112:
#line 443 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc(yyvsp[0].s); ;
    break;}
case 113:
#line 445 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 114:
#line 450 "cmdgram.y"
{ yyval.asn.token = '+'; yyval.asn.expr = FloatNode::alloc(1); ;
    break;}
case 115:
#line 452 "cmdgram.y"
{ yyval.asn.token = '-'; yyval.asn.expr = FloatNode::alloc(1); ;
    break;}
case 116:
#line 454 "cmdgram.y"
{ yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 117:
#line 456 "cmdgram.y"
{ yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 118:
#line 458 "cmdgram.y"
{ yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 119:
#line 460 "cmdgram.y"
{ yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 120:
#line 462 "cmdgram.y"
{ yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 121:
#line 464 "cmdgram.y"
{ yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 122:
#line 466 "cmdgram.y"
{ yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 123:
#line 468 "cmdgram.y"
{ yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 124:
#line 470 "cmdgram.y"
{ yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 125:
#line 472 "cmdgram.y"
{ yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 126:
#line 477 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 127:
#line 479 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 128:
#line 481 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc(yyvsp[-2].s, NULL, yyvsp[0].expr); ;
    break;}
case 129:
#line 483 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc(yyvsp[-5].s, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 130:
#line 485 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc(yyvsp[-1].s, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 131:
#line 487 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc(yyvsp[-4].s, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 132:
#line 489 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc(yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 133:
#line 491 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc(yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 134:
#line 493 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc(yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 135:
#line 498 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, NULL, yyvsp[-1].expr, false); ;
    break;}
case 136:
#line 500 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, yyvsp[-5].s, yyvsp[-1].expr, false); ;
    break;}
case 137:
#line 502 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc(yyvsp[-3].s, NULL, yyvsp[-5].expr, true); ;
    break;}
case 138:
#line 507 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 139:
#line 509 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 140:
#line 514 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 141:
#line 516 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 142:
#line 521 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 143:
#line 523 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 144:
#line 528 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, yyvsp[-3].s, yyvsp[-1].expr); ;
    break;}
case 145:
#line 530 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 146:
#line 532 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc(NULL, yyvsp[-4].expr, yyvsp[-6].s, yyvsp[-1].expr); ;
    break;}
case 147:
#line 537 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 148:
#line 539 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc(yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 541 "cmdgram.y"


